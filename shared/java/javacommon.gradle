apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'net.ltgt.errorprone'

def pubVersion
if (project.hasProperty("publishVersion")) {
    pubVersion = project.publishVersion
} else {
    pubVersion = WPILibVersion.version
}

def baseArtifactId = project.baseId
def artifactGroupId = project.groupId
def javaBaseName = "_GROUP_edu_wpi_first_${project.baseId}_ID_${project.baseId}-java_CLS"

def outputsFolder = file("$project.buildDir/outputs")

def sourcesJarTask = tasks.register('sourcesJar', Jar) {
    dependsOn tasks.named('classes')
    classifier = 'sources'
    from sourceSets.main.allSource
}

def javadocJarTask = tasks.register('javadocJar', Jar) {
    dependsOn tasks.named('javadoc')
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def outputJarTask = tasks.register('outputJar', Jar) {// outputJar(type: Jar, dependsOn: classes) {
    baseName javaBaseName
    destinationDir outputsFolder
    from sourceSets.main.output
}

def outputSourcesJarTask = tasks.register('outputSourcesJar', Jar) {// outputSourcesJar(type: Jar, dependsOn: classes) {
    tasks.named('classes')
    baseName javaBaseName
    destinationDir outputsFolder
    classifier = 'sources'
    from sourceSets.main.allSource
}

def outputJavadocJarTask = tasks.register('outputJavadocJar', Jar) {// outputJavadocJar(type: Jar, dependsOn: javadoc) {
    dependsOn tasks.named('javadoc')
    baseName javaBaseName
    destinationDir outputsFolder
    classifier = 'javadoc'
    from javadoc.destinationDir
}

addTaskToCopyAllOutputs(outputSourcesJarTask)
addTaskToCopyAllOutputs(outputJavadocJarTask)
addTaskToCopyAllOutputs(outputJarTask)

tasks.named('build').configure {
    dependsOn outputSourcesJarTask
    dependsOn outputJavadocJarTask
    dependsOn outputJarTask
}

project(':').tasks.named('libraryBuild').configure {
    dependsOn tasks.named('build')
}

publishing {
    publications {

        java(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar

            artifactId = "${baseArtifactId}-java"
            groupId artifactGroupId
            version pubVersion
        }
    }
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

if (project.hasProperty('onlyAthena')) {
    test.enabled = false
}

repositories {
    mavenCentral()
}

configurations.errorprone {
    resolutionStrategy.force 'com.google.errorprone:error_prone_core:2.0.9'
}

sourceSets {
    dev
}

compileJava.configure {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'

    devCompile sourceSets.main.output
}

tasks.register('run', JavaExec) {
    classpath = sourceSets.dev.runtimeClasspath

    main = project.devMain
}

tasks.named('build').configure {
    dependsOn devClasses
}
