import org.gradle.language.base.internal.ProjectLayout

apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: '../config.gradle'

ext.examplesMap = [:]

model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ FRCUserProgram: [] ]
        }
        ntcore(DependencyConfig) {
            groupId = 'edu.wpi.first.ntcore'
            artifactId = 'ntcore-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ FRCUserProgram: [] ]
        }
    }
}

model {
    components {
        FRCUserProgram(NativeExecutableSpec) {
            sources {
                cpp {
                    source {
                        "${rootDir}/gmock/gtest/src"
                        srcDirs = ["${rootDir}/gmock/gtest/src", 'src/FRCUserProgram/cpp']
                        includes = ['*-all.cc', '*_main.cc', '*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ["${rootDir}/gmock/gtest/include", 'src/FRCUserProgram/headers']
                        includes = ['**/*.h', '**/*.cc']
                    }
                }
            }
            binaries.all { binary->
                if (binary.targetPlatform.architecture.name == 'athena') {
                    binary.tasks.withType(CppCompile) {
                        cppCompiler.args "-DNAMESPACED_WPILIB"
                        cppCompiler.args "-DNAMESPACED_PRIORITY"
                        cppCompiler.args "-DCONFIG_ATHENA"
                        cppCompiler.args "-Wno-missing-field-initializers"
                        cppCompiler.args "-Wno-unused-variable"
                    }
                    binary.lib project: ':gmock', library: 'gmock', linkage: 'static'
                    project(':ni-libraries').addNiLibrariesToLinker(binary)
                    binary.lib project: ':hal', library: 'halAthena', linkage: 'shared'
                    binary.lib project: ':wpilibc', library: 'wpilibc', linkage: 'shared'
                } else {
                    binary.buildable = false
                }
            }
        }
    }
}


model {
    tasks {
        def bin = $.binaries
        copyWpilibCTestLibrariesToOutput(Task) {
            bin.each {
                if (it in NativeExecutableBinarySpec) {
                    def spec = it
                    dependsOn spec.buildTask
                }
            }
            def destDir = "$buildDir/testFiles";
            outputs.file destDir
            outputs.upToDateWhen { false }

            doLast {
                bin.each {
                    if (it in NativeExecutableBinarySpec) {
                        def spec = it
                        spec.libs.each {
                            it.runtimeFiles.each { f ->
                                copy {
                                    from file(f)
                                    into destDir + '/libs'
                                }
                            }
                        }
                        copy {
                            from spec.executable.file
                            into destDir + '/'
                        }
                    }
                }
            }
        }
        build.dependsOn copyWpilibCTestLibrariesToOutput
    }
}
