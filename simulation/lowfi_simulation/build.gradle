apply plugin: 'cpp'
apply plugin: 'google-test-test-suite'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'
apply plugin: SingleNativeBuild
apply plugin: ExtraTasks


ext {
    nativeName = 'lowfi_sim'
}

apply from: "${rootDir}/shared/config.gradle"

if (!project.hasProperty('onlyAthena')) {

    ext {
        sharedCvConfigs = [lowfi_simTest: []]
        staticCvConfigs = [:]
        useJava = false
        useCpp = true
    }
    apply from: "${rootDir}/shared/opencv.gradle"

    ext {
        staticGtestConfigs = [:]
    }
    staticGtestConfigs["${nativeName}Test"] = []
    apply from: "${rootDir}/shared/googletest.gradle"

    project(':').libraryBuild.dependsOn build


    model {
        exportsConfigs {
            lowfi_sim(ExportsConfig) {
                x86ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                     '_CT??_R0?AVbad_cast',
                                     '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                     '_TI5?AVfailure']
                x64ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                     '_CT??_R0?AVbad_cast',
                                     '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                     '_TI5?AVfailure']
            }
        }
        components {
            "${nativeName}Base"(NativeLibrarySpec) {
                sources {
                    cpp {
                        source {
                            srcDirs = ['src/main/native/cpp', "$buildDir/generated/cpp"]
                            include '**/*.cpp'
                        }
                        exportedHeaders {
                            srcDirs 'src/main/native/include'
                        }
                    }
                }
                binaries.all {
                    if (it instanceof SharedLibraryBinarySpec) {
                        it.buildable = false
                        return
                    }
                    if (it.targetPlatform.architecture.name == 'athena') {
                        it.buildable = false
                        return
                    }
                    lib project: ':hal', library: 'hal', linkage: 'shared'
                    lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
                    project(':ni-libraries').addNiLibrariesToLinker(it)
                }
            }
            "${nativeName}"(NativeLibrarySpec) {
                sources {
                    cpp {
                        source {
                            srcDirs "${rootDir}/shared/singlelib"
                            include '**/*.cpp'
                        }
                        exportedHeaders {
                            srcDirs 'src/main/native/include'
                        }
                    }
                }
                binaries.all {
                    if (it.targetPlatform.architecture.name == 'athena') {
                        it.buildable = false
                        return
                    }
                    lib project: ':hal', library: 'hal', linkage: 'shared'
                    lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
                    project(':ni-libraries').addNiLibrariesToLinker(it)
                }
            }
            // By default, a development executable will be generated. This is to help the case of
            // testing specific functionality of the library.
            "${nativeName}Dev"(NativeExecutableSpec) {
                sources {
                    cpp {
                        source {
                            srcDirs 'src/dev/native/cpp'
                            include '**/*.cpp'
                            lib library: 'lowfi_sim'
                        }
                        exportedHeaders {
                            srcDirs 'src/dev/native/include'
                        }
                    }
                }
                binaries.all {
                    if (it.targetPlatform.architecture.name == 'athena') {
                        it.buildable = false
                        return
                    }
                    lib project: ':hal', library: 'hal', linkage: 'shared'
                    lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
                    project(':ni-libraries').addNiLibrariesToLinker(it)
                }
            }
        }
        binaries {
            withType(GoogleTestTestSuiteBinarySpec) {
                lib project: ':ntcore', library: 'ntcore', linkage: 'shared'
                lib project: ':cscore', library: 'cscore', linkage: 'shared'
                lib project: ':hal', library: 'hal', linkage: 'shared'
                lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
                lib project: ':cameraserver', library: 'cameraserver', linkage: 'shared'
                lib project: ':wpilibc', library: 'wpilibc', linkage: 'shared'
                project(':ni-libraries').addNiLibrariesToLinker(it)
                lib library: nativeName, linkage: 'shared'
            }
        }
    }

    apply from: "publish.gradle"
}

model {

    testSuites {
        if (!project.hasProperty('onlyAthena')) {
            "${nativeName}Test"(GoogleTestTestSuiteSpec) {
                for(NativeComponentSpec c : $.components) {
                    if (c.name == nativeName) {
                        testing c
                        break
                    }
                }
                sources {
                    cpp {
                        source {
                            srcDirs 'src/test/native/cpp'
                            include '**/*.cpp'
                        }
                        exportedHeaders {
                            srcDirs 'src/test/native/include', 'src/main/native/cpp'
                        }
                    }
                }
            }
        }
    }
    tasks {
        def c = $.components
        project.tasks.register('runCpp', Exec) {
            def found = false
            c.each {
                if (it in NativeExecutableSpec && it.name == "${nativeName}Dev") {
                    it.binaries.each {
                        if (!found) {
                            def arch = it.targetPlatform.architecture.name
                            if (arch == 'x86-64' || arch == 'x86') {
                                dependsOn it.tasks.install

                                found = true
                            }
                        }
                    }
                }
            }
        }
    }
}

tasks.withType(RunTestExecutable).configureEach {
    args "--gtest_output=xml:test_detail.xml"
    outputs.dir outputDir
}
