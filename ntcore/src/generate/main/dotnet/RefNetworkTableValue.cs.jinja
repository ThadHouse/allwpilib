// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Natives;

namespace NetworkTables;

public readonly ref partial struct RefNetworkTableValue
{
{% for t in types %}
{% if t.dotnet.IsArray %}
    internal readonly ReadOnlySpan<{{ t.dotnet.BaseType }}> m_{{ t.dotnet.BaseType }}Span;

    internal RefNetworkTableValue(ReadOnlySpan<{{ t.dotnet.BaseType }}> value)
    {
        Type = NetworkTableType.{{ t.TypeName }};
        Time = NtCore.Now();
        m_{{ t.dotnet.BaseType }}Span = value;
    }

    internal RefNetworkTableValue(ReadOnlySpan<{{ t.dotnet.BaseType }}> value, long time)
    {
        Type = NetworkTableType.{{ t.TypeName }};
        Time = time;
        m_{{ t.dotnet.BaseType }}Span = value;
    }

    public static RefNetworkTableValue Make{{ t.TypeName }}(ReadOnlySpan<{{ t.dotnet.BaseType }}> value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue Make{{ t.TypeName }}(long time, ReadOnlySpan<{{ t.dotnet.BaseType }}> value) {
        return new RefNetworkTableValue(value, time);
    }
{% elif t.TypeName == "String" %}
    internal readonly string? m_stringValue;

    internal RefNetworkTableValue({{ t.dotnet.ValueType }} value)
    {
        Type = NetworkTableType.{{ t.TypeName }};
        Time = NtCore.Now();
        m_stringValue = value;
    }
    internal RefNetworkTableValue({{ t.dotnet.ValueType }} value, long time)
    {
        Type = NetworkTableType.{{ t.TypeName }};
        Time = time;
        m_stringValue = value;
    }

    public static RefNetworkTableValue Make{{ t.TypeName }}({{ t.dotnet.ValueType }} value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue Make{{ t.TypeName }}(long time, {{ t.dotnet.ValueType }} value) {
        return new RefNetworkTableValue(value, time);
    }
{% else %}
    internal RefNetworkTableValue({{ t.dotnet.ValueType }} value)
    {
        Type = NetworkTableType.{{ t.TypeName }};
        Time = NtCore.Now();
        m_structValue = new(value);
    }
    internal RefNetworkTableValue({{ t.dotnet.ValueType }} value, long time)
    {
        Type = NetworkTableType.{{ t.TypeName }};
        Time = time;
        m_structValue = new(value);
    }

    public static RefNetworkTableValue Make{{ t.TypeName }}({{ t.dotnet.ValueType }} value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue Make{{ t.TypeName }}(long time, {{ t.dotnet.ValueType }} value) {
        return new RefNetworkTableValue(value, time);
    }
{% endif -%}
{% endfor %}
}
