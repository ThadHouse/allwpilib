// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

/** NetworkTables generic implementation. */
internal sealed class GenericEntryImpl<THandle> : EntryBase<THandle>, IGenericEntry where THandle : struct, INtEntryHandle
{
  /**
   * Constructor.
   *
   * @param topic Topic
   * @param handle Native handle
   */
  internal GenericEntryImpl(Topic topic, THandle handle): base(handle) {
    Topic = topic;
  }

  public override Topic Topic { get; }

  public NetworkTableValue Get() {
    return NtCore.GetEntryValue(Handle);
  }
{% for t in types %}
  /**
   * Gets the entry's value as a {{ t.dotnet.ValueType }}. If the entry does not exist or is of different type, it
   * will return the default value.
   *
   * @param defaultValue the value to be returned if no value is found
   * @return the entry's value or the given default value
   */

  public {{ t.dotnet.ValueType }} Get{{ t.TypeName }}({{ t.dotnet.ValueType }} defaultValue) {
    NetworkTableValue value = NtCore.GetEntryValue(Handle);
    if (value.Is{{ t.TypeName }}) {
      return value.Get{{ t.TypeName }}();
    }
    return defaultValue;
  }
{% endfor %}

  public NetworkTableValue[] ReadQueue() {
    return NtCore.ReadQueueValue(Handle);
  }


  public bool Set(in NetworkTableValue value) {
    return NtCore.SetEntryValue(Handle, value);
  }

  /**
   * Sets the entry's value.
   *
   * @param value the value that will be assigned
   * @return False if the table key already exists with a different type
   * @throws IllegalArgumentException if the value is not a known type
   */

  public bool SetValue<T>(T value, long time)
  {
    return value switch
    {
      NetworkTableValue v => Set(v),
      bool v => Set(NetworkTableValue.MakeBoolean(v, time)),
      double v => Set(NetworkTableValue.MakeDouble(v, time)),
      float v => Set(NetworkTableValue.MakeFloat(v, time)),
      string v => Set(NetworkTableValue.MakeString(v, time)),
      bool[] v => Set(NetworkTableValue.MakeBooleanArray(v, time)),
      double[] v => Set(NetworkTableValue.MakeDoubleArray(v, time)),
      float[] v => Set(NetworkTableValue.MakeFloatArray(v, time)),
      string[] v => Set(NetworkTableValue.MakeStringArray(v, time)),
      byte[] v => Set(NetworkTableValue.MakeRaw(v, time)),
      _ => throw new InvalidOperationException($"Value of type {value?.GetType().Name} cannot be put into a table")
    };
  }
{% for t in types %}
  /**
   * Sets the entry's value.
   *
   * @param value the value to set
   * @return False if the entry exists with a different type
   */

  public bool Set{{ t.TypeName }}({{ t.dotnet.ValueType }} value, long time) {
    return NtCore.SetEntryValue(Handle, NetworkTableValue.Make{{ t.TypeName }}(value, time));
  }
{% endfor %}

  public bool SetDefault(in NetworkTableValue value) {
    return NtCore.SetDefaultEntryValue(Handle, value);
  }

  public bool SetDefaultValue<T>(T value)
  {
    return value switch
    {
      NetworkTableValue v => Set(v),
      bool v => SetDefault(NetworkTableValue.MakeBoolean(v)),
      double v => SetDefault(NetworkTableValue.MakeDouble(v)),
      float v => SetDefault(NetworkTableValue.MakeFloat(v)),
      string v => SetDefault(NetworkTableValue.MakeString(v)),
      bool[] v => SetDefault(NetworkTableValue.MakeBooleanArray(v)),
      double[] v => SetDefault(NetworkTableValue.MakeDoubleArray(v)),
      float[] v => SetDefault(NetworkTableValue.MakeFloatArray(v)),
      string[] v => SetDefault(NetworkTableValue.MakeStringArray(v)),
      byte[] v => SetDefault(NetworkTableValue.MakeRaw(v)),
      _ => throw new InvalidOperationException($"Value of type {value?.GetType().Name} cannot be put into a table")
    };
  }

{% for t in types %}
  /**
   * Sets the entry's value if it does not exist.
   *
   * @param defaultValue the default value to set
   * @return False if the entry exists with a different type
   */

  public bool SetDefault{{ t.TypeName }}({{ t.dotnet.ValueType }} value) {
    return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.Make{{ t.TypeName }}(value));
  }
{% endfor %}


  public void Unpublish() {
    NtCore.Unpublish(Handle);
  }
}
