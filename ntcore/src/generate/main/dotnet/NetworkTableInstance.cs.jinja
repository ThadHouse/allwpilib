// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using NetworkTables.Natives;

namespace NetworkTables;

public sealed partial class NetworkTableInstance
{
{%- for t in types %}
    private static {{ t.TypeName }}Topic {{ t.TypeName }}TopicCreator(string name, NetworkTableInstance instance)
    {
        {{ t.TypeName }}Topic topic = new {{ t.TypeName }}Topic(instance, NtCore.GetTopic(instance.Handle, name));
        instance.m_topicsByHandle.AddOrUpdate(topic.Handle, TopicByHandleAdder, TopicByHandleUpdater, topic);
        return topic;
    }
    private static {{ t.TypeName }}Topic {{ t.TypeName }}TopicUpdator(string name, Topic existingTopic, NetworkTableInstance instance)
    {
        // Exists, but might be wrong type
        if (existingTopic is {{ t.TypeName }}Topic {{ t.TypeName }}Topic)
        {
            return {{ t.TypeName }}Topic;
        }
        {{ t.TypeName }}Topic topic = new {{ t.TypeName }}Topic(instance, existingTopic.Handle);
        instance.m_topicsByHandle.AddOrUpdate(topic.Handle, TopicByHandleAdder, TopicByHandleUpdater, topic);
        return topic;
    }
    /// <summary>
    /// Gets a {{ t.dotnet.ValueType }} topic.
    /// </summary>
    /// <param name="name">topic name</param>
    /// <returns>{{ t.TypeName }}Topic</returns>
    public {{ t.TypeName }}Topic Get{{ t.TypeName }}Topic(string name)
    {
        return ({{ t.TypeName }}Topic)m_topics.AddOrUpdate(name, {{ t.TypeName }}TopicCreator, {{ t.TypeName }}TopicUpdator, this);
    }
{% endfor -%}
}
