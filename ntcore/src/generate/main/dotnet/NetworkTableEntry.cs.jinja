// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Natives;

namespace NetworkTables;

/**
 * NetworkTables Entry.
 *
 * <p>For backwards compatibility, the NetworkTableEntry close() does not release the entry.
 */
public sealed class NetworkTableEntry : Publisher, Subscriber, IDisposable {
  /**
   * Construct from native handle.
   *
   * @param inst Instance
   * @param handle Native handle
   */
  public NetworkTableEntry(NetworkTableInstance inst, int handle) : this(new Topic(inst, NtCore.GetTopicFromHandle(handle)), handle) {
  }

  /**
   * Construct from native handle.
   *
   * @param topic Topic
   * @param handle Native handle
   */
  public NetworkTableEntry(Topic topic, int handle) {
    Topic = topic;
    Handle = handle;
  }


  public void Dispose() {}

  /**
   * Determines if the native handle is valid.
   *
   * @return True if the native handle is valid, false otherwise.
   */

  public bool IsValid => Handle != 0;

  /**
   * Gets the native handle for the entry.
   *
   * @return Native handle
   */

  public int Handle { get; }

  /**
   * Gets the subscribed-to / published-to topic.
   *
   * @return Topic
   */

  public Topic Topic { get; }

  /**
   * Gets the instance for the entry.
   *
   * @return Instance
   */
  public NetworkTableInstance Instance => Topic.Instance;

  /**
   * Determines if the entry currently exists.
   *
   * @return True if the entry exists, false otherwise.
   */

  public bool Exists => Type != NetworkTableType.Unassigned;

  /**
   * Gets the name of the entry (the key).
   *
   * @return the entry's name
   */
  public string Name => throw new NotImplementedException();

  /**
   * Gets the type of the entry.
   *
   * @return the entry's type
   */
  public NetworkTableType Type => NtCore.GetEntryType(Handle);

  /**
   * Gets the last time the entry's value was changed.
   *
   * @return Entry last change time
   */

  public long LastChange => (long)NtCore.GetEntryLastChange(Handle);

  /**
   * Gets the entry's value. Returns a value with type NetworkTableType.kUnassigned if the value
   * does not exist.
   *
   * @return the entry's value
   */
  public NetworkTableValue GetValue() {
    NtCore.GetEntryValue(Handle, out NetworkTableValue value);
    return value;
  }
{% for t in types %}
  /**
   * Gets the entry's value as a {{ t.dotnet.ValueType }}. If the entry does not exist or is of different type, it
   * will return the default value.
   *
   * @param defaultValue the value to be returned if no value is found
   * @return the entry's value or the given default value
   */
  public {{ t.dotnet.ValueType }} Get{{ t.TypeName }}({{ t.dotnet.ValueType }} defaultValue) {
    NtCore.GetEntryValue(Handle, out NetworkTableValue value);
    if (value.Is{{ t.TypeName }}) {
      return value.Get{{ t.TypeName }}();
    }
    return defaultValue;
  }
{% endfor %}
  /**
   * Get an array of all value changes since the last call to readQueue.
   *
   * <p>The "poll storage" subscribe option can be used to set the queue
   * depth.
   *
   * @return Array of values; empty array if no new changes have been
   *     published since the previous call.
   */
  public NetworkTableValue[] ReadQueue() {
    return NtCore.ReadQueueValue(Handle, out nuint _);
  }

//  /**
//   * Checks if a data value is of a type that can be placed in a NetworkTable entry.
//   *
//   * @param data the data to check
//   * @return true if the data can be placed in an entry, false if it cannot
//   */
//  public static boolean isValidDataType(Object data) {
//    return data instanceof Number
//        || data instanceof Boolean
//        || data instanceof String
//        || data instanceof long[]
//        || data instanceof Long[]
//        || data instanceof float[]
//        || data instanceof Float[]
//        || data instanceof double[]
//        || data instanceof Double[]
//        || data instanceof Number[]
//        || data instanceof boolean[]
//        || data instanceof Boolean[]
//        || data instanceof String[]
//        || data instanceof byte[]
//        || data instanceof Byte[];
//  }
//
//  /**
//   * Sets the entry's value if it does not exist.
//   *
//   * @param defaultValue the default value to set
//   * @return False if the entry exists with a different type
//   * @throws IllegalArgumentException if the value is not a known type
//   */
//  public boolean setDefaultValue(Object defaultValue) {
//    if (defaultValue instanceof NetworkTableValue) {
//      long time = ((NetworkTableValue) defaultValue).getTime();
//      Object otherValue = ((NetworkTableValue) defaultValue).getValue();
//      switch (((NetworkTableValue) defaultValue).getType()) {
//        case kBoolean:
//          return NtCore.setDefaultBoolean(m_handle, time, (Boolean) otherValue);
//        case kInteger:
//          return NtCore.setDefaultInteger(
//              m_handle, time, ((Number) otherValue).longValue());
//        case kFloat:
//          return NtCore.setDefaultFloat(
//              m_handle, time, ((Number) otherValue).floatValue());
//        case kDouble:
//          return NtCore.setDefaultDouble(
//              m_handle, time, ((Number) otherValue).doubleValue());
//        case kString:
//          return NtCore.setDefaultString(m_handle, time, (String) otherValue);
//        case kRaw:
//          return NtCore.setDefaultRaw(m_handle, time, (byte[]) otherValue);
//        case kBooleanArray:
//          return NtCore.setDefaultBooleanArray(m_handle, time, (boolean[]) otherValue);
//        case kIntegerArray:
//          return NtCore.setDefaultIntegerArray(m_handle, time, (long[]) otherValue);
//        case kFloatArray:
//          return NtCore.setDefaultFloatArray(m_handle, time, (float[]) otherValue);
//        case kDoubleArray:
//          return NtCore.setDefaultDoubleArray(m_handle, time, (double[]) otherValue);
//        case kStringArray:
//          return NtCore.setDefaultStringArray(m_handle, time, (String[]) otherValue);
//        default:
//          return true;
//      }
//    } else if (defaultValue instanceof Boolean) {
//      return setDefaultBoolean((Boolean) defaultValue);
//    } else if (defaultValue instanceof Integer) {
//      return setDefaultInteger((Integer) defaultValue);
//    } else if (defaultValue instanceof Float) {
//      return setDefaultFloat((Float) defaultValue);
//    } else if (defaultValue instanceof Number) {
//      return setDefaultNumber((Number) defaultValue);
//    } else if (defaultValue instanceof String) {
//      return setDefaultString((String) defaultValue);
//    } else if (defaultValue instanceof byte[]) {
//      return setDefaultRaw((byte[]) defaultValue);
//    } else if (defaultValue instanceof boolean[]) {
//      return setDefaultBooleanArray((boolean[]) defaultValue);
//    } else if (defaultValue instanceof long[]) {
//      return setDefaultIntegerArray((long[]) defaultValue);
//    } else if (defaultValue instanceof float[]) {
//      return setDefaultFloatArray((float[]) defaultValue);
//    } else if (defaultValue instanceof double[]) {
//      return setDefaultDoubleArray((double[]) defaultValue);
//    } else if (defaultValue instanceof Boolean[]) {
//      return setDefaultBooleanArray((Boolean[]) defaultValue);
//    } else if (defaultValue instanceof Long[]) {
//      return setDefaultIntegerArray((Long[]) defaultValue);
//    } else if (defaultValue instanceof Float[]) {
//      return setDefaultFloatArray((Float[]) defaultValue);
//    } else if (defaultValue instanceof Number[]) {
//      return setDefaultNumberArray((Number[]) defaultValue);
//    } else if (defaultValue instanceof String[]) {
//      return setDefaultStringArray((String[]) defaultValue);
//    } else {
//      throw new IllegalArgumentException(
//          "Value of type " + defaultValue.getClass().getName() + " cannot be put into a table");
//    }
//  }

{% for t in types %}
  /**
   * Sets the entry's value if it does not exist.
   *
   * @param defaultValue the default value to set
   * @return False if the entry exists with a different type
   */
  public bool SetDefault{{ t.TypeName }}({{ t.dotnet.ValueType }} value, long time) {
    return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.Make{{ t.TypeName }}(value, time));
  }
{% endfor %}

//  /**
//   * Sets the entry's value.
//   *
//   * @param value the value that will be assigned
//   * @return False if the table key already exists with a different type
//   * @throws IllegalArgumentException if the value is not a known type
//   */
//  public boolean setValue(Object value) {
//    if (value instanceof NetworkTableValue) {
//      long time = ((NetworkTableValue) value).getTime();
//      Object otherValue = ((NetworkTableValue) value).getValue();
//      switch (((NetworkTableValue) value).getType()) {
//        case kBoolean:
//          return NtCore.setBoolean(m_handle, time, (Boolean) otherValue);
//        case kInteger:
//          return NtCore.setInteger(
//              m_handle, time, ((Number) otherValue).longValue());
//        case kFloat:
//          return NtCore.setFloat(
//              m_handle, time, ((Number) otherValue).floatValue());
//        case kDouble:
//          return NtCore.setDouble(
//              m_handle, time, ((Number) otherValue).doubleValue());
//        case kString:
//          return NtCore.setString(m_handle, time, (String) otherValue);
//        case kRaw:
//          return NtCore.setRaw(m_handle, time, (byte[]) otherValue);
//        case kBooleanArray:
//          return NtCore.setBooleanArray(m_handle, time, (boolean[]) otherValue);
//        case kIntegerArray:
//          return NtCore.setIntegerArray(m_handle, time, (long[]) otherValue);
//        case kFloatArray:
//          return NtCore.setFloatArray(m_handle, time, (float[]) otherValue);
//        case kDoubleArray:
//          return NtCore.setDoubleArray(m_handle, time, (double[]) otherValue);
//        case kStringArray:
//          return NtCore.setStringArray(m_handle, time, (String[]) otherValue);
//        default:
//          return true;
//      }
//    } else if (value instanceof Boolean) {
//      return setBoolean((Boolean) value);
//    } else if (value instanceof Long) {
//      return setInteger((Long) value);
//    } else if (value instanceof Float) {
//      return setFloat((Float) value);
//    } else if (value instanceof Number) {
//      return setNumber((Number) value);
//    } else if (value instanceof String) {
//      return setString((String) value);
//    } else if (value instanceof byte[]) {
//      return setRaw((byte[]) value);
//    } else if (value instanceof boolean[]) {
//      return setBooleanArray((boolean[]) value);
//    } else if (value instanceof long[]) {
//      return setIntegerArray((long[]) value);
//    } else if (value instanceof float[]) {
//      return setFloatArray((float[]) value);
//    } else if (value instanceof double[]) {
//      return setDoubleArray((double[]) value);
//    } else if (value instanceof Boolean[]) {
//      return setBooleanArray((Boolean[]) value);
//    } else if (value instanceof Long[]) {
//      return setIntegerArray((Long[]) value);
//    } else if (value instanceof Float[]) {
//      return setFloatArray((Float[]) value);
//    } else if (value instanceof Number[]) {
//      return setNumberArray((Number[]) value);
//    } else if (value instanceof String[]) {
//      return setStringArray((String[]) value);
//    } else {
//      throw new IllegalArgumentException(
//          "Value of type " + value.getClass().getName() + " cannot be put into a table");
//    }
//  }
{% for t in types %}
  /**
   * Sets the entry's value.
   *
   * @param value the value to set
   * @return False if the entry exists with a different type
   */
  public bool Set{{ t.TypeName }}({{ t.dotnet.ValueType }} value, long time) {
    return NtCore.SetEntryValue(Handle, NetworkTableValue.Make{{ t.TypeName }}(value, time));
  }
{% endfor %}

  /** Make value persistent through program restarts. */
  public void SetPersistent() {
    NtCore.SetTopicPersistent(Topic.Handle, true);
  }

  /** Stop making value persistent through program restarts. */
  public void clearPersistent() {
    NtCore.SetTopicPersistent(Topic.Handle, false);
  }

  /**
   * Returns whether the value is persistent through program restarts.
   *
   * @return True if the value is persistent.
   */
  public bool IsPersistent() {
    return NtCore.GetTopicPersistent(Topic.Handle);
  }

  /** Stops publishing the entry if it's been published. */
  public void Unpublish() {
    NtCore.Unpublish(Handle);
  }

  // TODO equals and hash code
}
