// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

internal sealed class {{ TypeName }}EntryImpl<T> : EntryBase<T>, I{{ TypeName }}Entry where T : struct, INtEntryHandle
{
    internal {{ TypeName }}EntryImpl({{ TypeName }}Topic topic, T handle, {{ dotnet.ValueType }} defaultValue) : base(handle)
    {
        Topic = topic;
        m_defaultValue = defaultValue;
    }

    public override {{ TypeName }}Topic Topic { get; }

    public {{ dotnet.ValueType }} Get()
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.Is{{ TypeName }})
        {
            return value.Get{{ TypeName }}();
        }
        return m_defaultValue;
    }

    public {{ dotnet.ValueType }} Get({{ dotnet.ValueType }} defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.Is{{ TypeName }})
        {
            return value.Get{{ TypeName }}();
        }
        return defaultValue;
    }

    public TimestampedObject<{{ dotnet.ValueType }}> GetAtomic()
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        {{ dotnet.ValueType }} baseValue = value.Is{{ TypeName }} ? value.Get{{ TypeName }}() : m_defaultValue;
        return new TimestampedObject<{{ dotnet.ValueType }}>(value.Time, value.ServerTime, baseValue);
    }

    public TimestampedObject<{{ dotnet.ValueType }}> GetAtomic({{ dotnet.ValueType }} defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        {{ dotnet.ValueType }} baseValue = value.Is{{ TypeName }} ? value.Get{{ TypeName }}() : defaultValue;
        return new TimestampedObject<{{ dotnet.ValueType }}>(value.Time, value.ServerTime, baseValue);
    }

    public TimestampedObject<{{ dotnet.ValueType }}>[] ReadQueue()
    {
        NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
        TimestampedObject<{{ dotnet.ValueType }}>[] timestamped = new TimestampedObject<{{ dotnet.ValueType }}>[values.Length];
        for (int i = 0; i < values.Length; i++)
        {
            timestamped[i] = new TimestampedObject<{{ dotnet.ValueType }}>(values[i].Time, values[i].ServerTime, values[i].Get{{ TypeName }}());
        }
        return timestamped;
    }

    public {{ dotnet.ValueType }}[] ReadQueueValues()
    {
        NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
        {{ dotnet.ValueType }}[] timestamped = new {{ dotnet.BaseType }}[values.Length]{% if dotnet.IsArray %}[]{% endif %};
        for (int i = 0; i < values.Length; i++)
        {
            timestamped[i] = values[i].Get{{ TypeName }}();
        }
        return timestamped;
    }

{% if dotnet.IsArray %}
    public void Set(ReadOnlySpan<{{ dotnet.BaseType }}> value)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.Make{{ TypeName }}(value, 0);
        NtCore.SetEntryValue(Handle, ntValue);
    }

    public void Set(ReadOnlySpan<{{ dotnet.BaseType }}> value, long time)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.Make{{ TypeName }}(value, time);
        NtCore.SetEntryValue(Handle, ntValue);
    }

    public void SetDefault(ReadOnlySpan<{{ dotnet.BaseType }}> value)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.Make{{ TypeName }}(value);
        NtCore.SetDefaultEntryValue(Handle, ntValue);
    }
{% else %}
    public void Set({{ dotnet.ValueType }} value)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.Make{{ TypeName }}(value, 0);
        NtCore.SetEntryValue(Handle, ntValue);
    }

    public void Set({{ dotnet.ValueType }} value, long time)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.Make{{ TypeName }}(value, time);
        NtCore.SetEntryValue(Handle, ntValue);
    }

    public void SetDefault({{ dotnet.ValueType }} value)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.Make{{ TypeName }}(value);
        NtCore.SetDefaultEntryValue(Handle, ntValue);
    }
{% endif %}
    public void Unpublish()
    {
        NtCore.Unpublish(Handle);
    }

    private readonly {{ dotnet.ValueType }} m_defaultValue;
}
