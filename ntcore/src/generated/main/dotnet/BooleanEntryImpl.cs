// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

internal sealed class BooleanEntryImpl<T> : EntryBase<T>, IBooleanEntry where T : struct, INtEntryHandle
{
    internal BooleanEntryImpl(BooleanTopic topic, T handle, bool defaultValue) : base(handle)
    {
        Topic = topic;
        m_defaultValue = defaultValue;
    }

    public override BooleanTopic Topic { get; }

    public bool Get()
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsBoolean)
        {
            return value.GetBoolean();
        }
        return m_defaultValue;
    }

    public bool Get(bool defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsBoolean)
        {
            return value.GetBoolean();
        }
        return defaultValue;
    }

    public TimestampedObject<bool> GetAtomic()
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        bool baseValue = value.IsBoolean ? value.GetBoolean() : m_defaultValue;
        return new TimestampedObject<bool>(value.Time, value.ServerTime, baseValue);
    }

    public TimestampedObject<bool> GetAtomic(bool defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        bool baseValue = value.IsBoolean ? value.GetBoolean() : defaultValue;
        return new TimestampedObject<bool>(value.Time, value.ServerTime, baseValue);
    }

    public TimestampedObject<bool>[] ReadQueue()
    {
        NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
        TimestampedObject<bool>[] timestamped = new TimestampedObject<bool>[values.Length];
        for (int i = 0; i < values.Length; i++)
        {
            timestamped[i] = new TimestampedObject<bool>(values[i].Time, values[i].ServerTime, values[i].GetBoolean());
        }
        return timestamped;
    }

    public bool[] ReadQueueValues()
    {
        NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
        bool[] timestamped = new bool[values.Length];
        for (int i = 0; i < values.Length; i++)
        {
            timestamped[i] = values[i].GetBoolean();
        }
        return timestamped;
    }


    public void Set(bool value)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.MakeBoolean(value, 0);
        NtCore.SetEntryValue(Handle, ntValue);
    }

    public void Set(bool value, long time)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.MakeBoolean(value, time);
        NtCore.SetEntryValue(Handle, ntValue);
    }

    public void SetDefault(bool value)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.MakeBoolean(value);
        NtCore.SetDefaultEntryValue(Handle, ntValue);
    }

    public void Unpublish()
    {
        NtCore.Unpublish(Handle);
    }

    private readonly bool m_defaultValue;
}
