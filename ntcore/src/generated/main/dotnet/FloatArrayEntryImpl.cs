// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

/** NetworkTables FloatArray implementation. */
internal sealed class FloatArrayEntryImpl : EntryBase, FloatArrayEntry {
  /**
   * Constructor.
   *
   * @param topic Topic
   * @param handle Native handle
   * @param defaultValue Default value for Get()
   */
  internal FloatArrayEntryImpl(FloatArrayTopic topic, NtPubSubEntry handle, float[] defaultValue) : base(handle) {
    Topic = topic;
    m_defaultValue = defaultValue;
  }


  public override FloatArrayTopic Topic { get; }


  public float[] Get() {
    NtCore.GetEntryValue(Handle, out NetworkTableValue value);
    if (value.IsFloatArray) {
      return value.GetFloatArray();
    }
    return m_defaultValue;
  }


  public float[] Get(float[] defaultValue) {
    NtCore.GetEntryValue(Handle, out NetworkTableValue value);
    if (value.IsFloatArray) {
      return value.GetFloatArray();
    }
    return defaultValue;
  }


  public TimestampedFloatArray GetAtomic() {
    NtCore.GetEntryValue(Handle, out NetworkTableValue value);
    float[] baseValue = value.IsFloatArray ? value.GetFloatArray() : m_defaultValue;
    return new TimestampedFloatArray(value.Time, value.ServerTime, baseValue);
  }


  public TimestampedFloatArray GetAtomic(float[] defaultValue) {
    NtCore.GetEntryValue(Handle, out NetworkTableValue value);
    float[] baseValue = value.IsFloatArray ? value.GetFloatArray() : defaultValue;
    return new TimestampedFloatArray(value.Time, value.ServerTime, baseValue);
  }


  public TimestampedFloatArray[] ReadQueue() {
    NetworkTableValue[] values = NtCore.ReadQueueValue(Handle, out nuint _);
    TimestampedFloatArray[] timestamped = new TimestampedFloatArray[values.Length];
    for(int i = 0; i < values.Length; i++) {
      timestamped[i] = new TimestampedFloatArray(values[i].Time, values[i].ServerTime, values[i].GetFloatArray());
    }
    return timestamped;
  }


  public float[][] ReadQueueValues() {
    NetworkTableValue[] values = NtCore.ReadQueueValue(Handle, out nuint _);
    float[][] timestamped = new float[values.Length][];
    for(int i = 0; i < values.Length; i++) {
      timestamped[i] = values[i].GetFloatArray();
    }
    return timestamped;
  }

  public void Set(float[] value, long time) {
    NetworkTableValue ntValue = NetworkTableValue.MakeFloatArray(value, time);
    NtCore.SetEntryValue(Handle, ntValue);
  }

  public void SetDefault(float[] value) {
    NetworkTableValue ntValue = NetworkTableValue.MakeFloatArray(value);
    NtCore.SetDefaultEntryValue(Handle, ntValue);
  }

  public void Unpublish() {
    NtCore.Unpublish(Handle);
  }

  private readonly float[] m_defaultValue;
}