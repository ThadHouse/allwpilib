// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

/** NetworkTables StringArray implementation. */
internal sealed class StringArrayEntryImpl<T> : EntryBase<T>, IStringArrayEntry where T : struct, INtEntryHandle {
  /**
   * Constructor.
   *
   * @param topic Topic
   * @param handle Native handle
   * @param defaultValue Default value for Get()
   */
  internal StringArrayEntryImpl(StringArrayTopic topic, T handle, string[] defaultValue) : base(handle) {
    Topic = topic;
    m_defaultValue = defaultValue;
  }

  public override StringArrayTopic Topic { get; }


  public string[] Get() {
    NetworkTableValue value = NtCore.GetEntryValue(Handle);
    if (value.IsStringArray) {
      return value.GetStringArray();
    }
    return m_defaultValue;
  }


  public string[] Get(string[] defaultValue) {
    NetworkTableValue value = NtCore.GetEntryValue(Handle);
    if (value.IsStringArray) {
      return value.GetStringArray();
    }
    return defaultValue;
  }


  public TimestampedStringArray GetAtomic() {
    NetworkTableValue value = NtCore.GetEntryValue(Handle);
    string[] baseValue = value.IsStringArray ? value.GetStringArray() : m_defaultValue;
    return new TimestampedStringArray(value.Time, value.ServerTime, baseValue);
  }


  public TimestampedStringArray GetAtomic(string[] defaultValue) {
    NetworkTableValue value = NtCore.GetEntryValue(Handle);
    string[] baseValue = value.IsStringArray ? value.GetStringArray() : defaultValue;
    return new TimestampedStringArray(value.Time, value.ServerTime, baseValue);
  }


  public TimestampedStringArray[] ReadQueue() {
    NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
    TimestampedStringArray[] timestamped = new TimestampedStringArray[values.Length];
    for(int i = 0; i < values.Length; i++) {
      timestamped[i] = new TimestampedStringArray(values[i].Time, values[i].ServerTime, values[i].GetStringArray());
    }
    return timestamped;
  }


  public string[][] ReadQueueValues() {
    NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
    string[][] timestamped = new string[values.Length][];
    for(int i = 0; i < values.Length; i++) {
      timestamped[i] = values[i].GetStringArray();
    }
    return timestamped;
  }

  public void Set(string[] value, long time) {
    NetworkTableValue ntValue = NetworkTableValue.MakeStringArray(value, time);
    NtCore.SetEntryValue(Handle, ntValue);
  }

  public void SetDefault(string[] value) {
    NetworkTableValue ntValue = NetworkTableValue.MakeStringArray(value);
    NtCore.SetDefaultEntryValue(Handle, ntValue);
  }

  public void Unpublish() {
    NtCore.Unpublish(Handle);
  }

  private readonly string[] m_defaultValue;
}