// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

internal sealed class RawEntryImpl<T> : EntryBase<T>, IRawEntry where T : struct, INtEntryHandle
{
    internal RawEntryImpl(RawTopic topic, T handle, byte[] defaultValue) : base(handle)
    {
        Topic = topic;
        m_defaultValue = defaultValue;
    }

    public override RawTopic Topic { get; }

    public byte[] Get()
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsRaw)
        {
            return value.GetRaw();
        }
        return m_defaultValue;
    }

    public byte[] Get(byte[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsRaw)
        {
            return value.GetRaw();
        }
        return defaultValue;
    }

    public TimestampedObject<byte[]> GetAtomic()
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        byte[] baseValue = value.IsRaw ? value.GetRaw() : m_defaultValue;
        return new TimestampedObject<byte[]>(value.Time, value.ServerTime, baseValue);
    }

    public TimestampedObject<byte[]> GetAtomic(byte[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        byte[] baseValue = value.IsRaw ? value.GetRaw() : defaultValue;
        return new TimestampedObject<byte[]>(value.Time, value.ServerTime, baseValue);
    }

    public TimestampedObject<byte[]>[] ReadQueue()
    {
        NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
        TimestampedObject<byte[]>[] timestamped = new TimestampedObject<byte[]>[values.Length];
        for (int i = 0; i < values.Length; i++)
        {
            timestamped[i] = new TimestampedObject<byte[]>(values[i].Time, values[i].ServerTime, values[i].GetRaw());
        }
        return timestamped;
    }

    public byte[][] ReadQueueValues()
    {
        NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
        byte[][] timestamped = new byte[values.Length][];
        for (int i = 0; i < values.Length; i++)
        {
            timestamped[i] = values[i].GetRaw();
        }
        return timestamped;
    }


    public void Set(ReadOnlySpan<byte> value)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.MakeRaw(value, 0);
        NtCore.SetEntryValue(Handle, ntValue);
    }

    public void Set(ReadOnlySpan<byte> value, long time)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.MakeRaw(value, time);
        NtCore.SetEntryValue(Handle, ntValue);
    }

    public void SetDefault(ReadOnlySpan<byte> value)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.MakeRaw(value);
        NtCore.SetDefaultEntryValue(Handle, ntValue);
    }

    public void Unpublish()
    {
        NtCore.Unpublish(Handle);
    }

    private readonly byte[] m_defaultValue;
}
