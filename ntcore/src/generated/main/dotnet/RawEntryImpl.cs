// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using NetworkTables.Natives;

namespace NetworkTables;

/** NetworkTables Raw implementation. */
internal sealed class RawEntryImpl : EntryBase, RawEntry {
  /**
   * Constructor.
   *
   * @param topic Topic
   * @param handle Native handle
   * @param defaultValue Default value for Get()
   */
  internal RawEntryImpl(RawTopic topic, int handle, byte[] defaultValue) : base(handle) {
    Topic = topic;
    m_defaultValue = defaultValue;
  }


  public override RawTopic Topic { get; }


  public byte[] Get() {
    NtCore.GetEntryValue(Handle, out NetworkTableValue value);
    if (value.IsRaw) {
      return value.GetRaw();
    }
    return m_defaultValue;
  }


  public byte[] Get(byte[] defaultValue) {
    NtCore.GetEntryValue(Handle, out NetworkTableValue value);
    if (value.IsRaw) {
      return value.GetRaw();
    }
    return defaultValue;
  }


  public TimestampedRaw GetAtomic() {
    NtCore.GetEntryValue(Handle, out NetworkTableValue value);
    byte[] baseValue = value.IsRaw ? value.GetRaw() : m_defaultValue;
    return new TimestampedRaw(value.Time, value.ServerTime, baseValue);
  }


  public TimestampedRaw GetAtomic(byte[] defaultValue) {
    NtCore.GetEntryValue(Handle, out NetworkTableValue value);
    byte[] baseValue = value.IsRaw ? value.GetRaw() : defaultValue;
    return new TimestampedRaw(value.Time, value.ServerTime, baseValue);
  }


  public TimestampedRaw[] ReadQueue() {
    NetworkTableValue[] values = NtCore.ReadQueueValue(Handle, out nuint _);
    TimestampedRaw[] timestamped = new TimestampedRaw[values.Length];
    for(int i = 0; i < values.Length; i++) {
      timestamped[i] = new TimestampedRaw(values[i].Time, values[i].ServerTime, values[i].GetRaw());
    }
    return timestamped;
  }


  public byte[][] ReadQueueValues() {
    NetworkTableValue[] values = NtCore.ReadQueueValue(Handle, out nuint _);
    byte[][] timestamped = new byte[values.Length][];
    for(int i = 0; i < values.Length; i++) {
      timestamped[i] = values[i].GetRaw();
    }
    return timestamped;
  }

  public void Set(byte[] value, long time) {
    NetworkTableValue ntValue = NetworkTableValue.MakeRaw(value, time);
    NtCore.SetEntryValue(Handle, ntValue);
  }

  public void SetDefault(byte[] value) {
    NetworkTableValue ntValue = NetworkTableValue.MakeRaw(value);
    NtCore.SetDefaultEntryValue(Handle, ntValue);
  }

  public void Unpublish() {
    NtCore.Unpublish(Handle);
  }

  private readonly byte[] m_defaultValue;
}