// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

namespace NetworkTables;

public partial interface IGenericSubscriber
{

    /// <summary>
    /// Gets the entry's value as a bool. If the entry does not exist
    /// or is of a different type, it will return the default value.
    /// </summary>
    /// <param name="defaultValue">the value to be returned if no value is found</param>
    /// <returns>the entry's value or the given default value</returns>
    bool GetBoolean(bool defaultValue);

    /// <summary>
    /// Gets the entry's value as a long. If the entry does not exist
    /// or is of a different type, it will return the default value.
    /// </summary>
    /// <param name="defaultValue">the value to be returned if no value is found</param>
    /// <returns>the entry's value or the given default value</returns>
    long GetInteger(long defaultValue);

    /// <summary>
    /// Gets the entry's value as a float. If the entry does not exist
    /// or is of a different type, it will return the default value.
    /// </summary>
    /// <param name="defaultValue">the value to be returned if no value is found</param>
    /// <returns>the entry's value or the given default value</returns>
    float GetFloat(float defaultValue);

    /// <summary>
    /// Gets the entry's value as a double. If the entry does not exist
    /// or is of a different type, it will return the default value.
    /// </summary>
    /// <param name="defaultValue">the value to be returned if no value is found</param>
    /// <returns>the entry's value or the given default value</returns>
    double GetDouble(double defaultValue);

    /// <summary>
    /// Gets the entry's value as a byte[]. If the entry does not exist
    /// or is of a different type, it will return the default value.
    /// </summary>
    /// <param name="defaultValue">the value to be returned if no value is found</param>
    /// <returns>the entry's value or the given default value</returns>
    byte[] GetRaw(byte[] defaultValue);

    /// <summary>
    /// Gets the entry's value as a bool[]. If the entry does not exist
    /// or is of a different type, it will return the default value.
    /// </summary>
    /// <param name="defaultValue">the value to be returned if no value is found</param>
    /// <returns>the entry's value or the given default value</returns>
    bool[] GetBooleanArray(bool[] defaultValue);

    /// <summary>
    /// Gets the entry's value as a long[]. If the entry does not exist
    /// or is of a different type, it will return the default value.
    /// </summary>
    /// <param name="defaultValue">the value to be returned if no value is found</param>
    /// <returns>the entry's value or the given default value</returns>
    long[] GetIntegerArray(long[] defaultValue);

    /// <summary>
    /// Gets the entry's value as a float[]. If the entry does not exist
    /// or is of a different type, it will return the default value.
    /// </summary>
    /// <param name="defaultValue">the value to be returned if no value is found</param>
    /// <returns>the entry's value or the given default value</returns>
    float[] GetFloatArray(float[] defaultValue);

    /// <summary>
    /// Gets the entry's value as a double[]. If the entry does not exist
    /// or is of a different type, it will return the default value.
    /// </summary>
    /// <param name="defaultValue">the value to be returned if no value is found</param>
    /// <returns>the entry's value or the given default value</returns>
    double[] GetDoubleArray(double[] defaultValue);

}
