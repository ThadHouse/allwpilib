// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

/** NetworkTables String implementation. */
internal sealed class StringEntryImpl<T> : EntryBase<T>, IStringEntry where T : struct, INtEntryHandle {
  /**
   * Constructor.
   *
   * @param topic Topic
   * @param handle Native handle
   * @param defaultValue Default value for Get()
   */
  internal StringEntryImpl(StringTopic topic, T handle, string defaultValue) : base(handle) {
    Topic = topic;
    m_defaultValue = defaultValue;
  }

  public override StringTopic Topic { get; }


  public string Get() {
    NetworkTableValue value = NtCore.GetEntryValue(Handle);
    if (value.IsString) {
      return value.GetString();
    }
    return m_defaultValue;
  }


  public string Get(string defaultValue) {
    NetworkTableValue value = NtCore.GetEntryValue(Handle);
    if (value.IsString) {
      return value.GetString();
    }
    return defaultValue;
  }


  public TimestampedString GetAtomic() {
    NetworkTableValue value = NtCore.GetEntryValue(Handle);
    string baseValue = value.IsString ? value.GetString() : m_defaultValue;
    return new TimestampedString(value.Time, value.ServerTime, baseValue);
  }


  public TimestampedString GetAtomic(string defaultValue) {
    NetworkTableValue value = NtCore.GetEntryValue(Handle);
    string baseValue = value.IsString ? value.GetString() : defaultValue;
    return new TimestampedString(value.Time, value.ServerTime, baseValue);
  }


  public TimestampedString[] ReadQueue() {
    NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
    TimestampedString[] timestamped = new TimestampedString[values.Length];
    for(int i = 0; i < values.Length; i++) {
      timestamped[i] = new TimestampedString(values[i].Time, values[i].ServerTime, values[i].GetString());
    }
    return timestamped;
  }


  public string[] ReadQueueValues() {
    NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
    string[] timestamped = new string[values.Length];
    for(int i = 0; i < values.Length; i++) {
      timestamped[i] = values[i].GetString();
    }
    return timestamped;
  }

  public void Set(string value, long time) {
    NetworkTableValue ntValue = NetworkTableValue.MakeString(value, time);
    NtCore.SetEntryValue(Handle, ntValue);
  }

  public void SetDefault(string value) {
    NetworkTableValue ntValue = NetworkTableValue.MakeString(value);
    NtCore.SetDefaultEntryValue(Handle, ntValue);
  }

  public void Unpublish() {
    NtCore.Unpublish(Handle);
  }

  private readonly string m_defaultValue;
}