// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

internal sealed class StringEntryImpl<T> : EntryBase<T>, IStringEntry where T : struct, INtEntryHandle
{
    internal StringEntryImpl(StringTopic topic, T handle, string defaultValue) : base(handle)
    {
        Topic = topic;
        m_defaultValue = defaultValue;
    }

    public override StringTopic Topic { get; }

    public string Get()
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsString)
        {
            return value.GetString();
        }
        return m_defaultValue;
    }

    public string Get(string defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsString)
        {
            return value.GetString();
        }
        return defaultValue;
    }

    public TimestampedObject<string> GetAtomic()
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        string baseValue = value.IsString ? value.GetString() : m_defaultValue;
        return new TimestampedObject<string>(value.Time, value.ServerTime, baseValue);
    }

    public TimestampedObject<string> GetAtomic(string defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        string baseValue = value.IsString ? value.GetString() : defaultValue;
        return new TimestampedObject<string>(value.Time, value.ServerTime, baseValue);
    }

    public TimestampedObject<string>[] ReadQueue()
    {
        NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
        TimestampedObject<string>[] timestamped = new TimestampedObject<string>[values.Length];
        for (int i = 0; i < values.Length; i++)
        {
            timestamped[i] = new TimestampedObject<string>(values[i].Time, values[i].ServerTime, values[i].GetString());
        }
        return timestamped;
    }

    public string[] ReadQueueValues()
    {
        NetworkTableValue[] values = NtCore.ReadQueueValue(Handle);
        string[] timestamped = new string[values.Length];
        for (int i = 0; i < values.Length; i++)
        {
            timestamped[i] = values[i].GetString();
        }
        return timestamped;
    }


    public void Set(string value)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.MakeString(value, 0);
        NtCore.SetEntryValue(Handle, ntValue);
    }

    public void Set(string value, long time)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.MakeString(value, time);
        NtCore.SetEntryValue(Handle, ntValue);
    }

    public void SetDefault(string value)
    {
        RefNetworkTableValue ntValue = RefNetworkTableValue.MakeString(value);
        NtCore.SetDefaultEntryValue(Handle, ntValue);
    }

    public void Unpublish()
    {
        NtCore.Unpublish(Handle);
    }

    private readonly string m_defaultValue;
}
