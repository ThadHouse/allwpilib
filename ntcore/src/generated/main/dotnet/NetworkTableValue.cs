// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;

namespace NetworkTables;

public readonly partial struct NetworkTableValue
{

    /// <summary>
    /// Gets if entry value contains a bool.
    /// </summary>
    public bool IsBoolean => Type == NetworkTableType.Boolean;

    /// <summary>
    /// Gets if entry value contains a long.
    /// </summary>
    public bool IsInteger => Type == NetworkTableType.Integer;

    /// <summary>
    /// Gets if entry value contains a float.
    /// </summary>
    public bool IsFloat => Type == NetworkTableType.Float;

    /// <summary>
    /// Gets if entry value contains a double.
    /// </summary>
    public bool IsDouble => Type == NetworkTableType.Double;

    /// <summary>
    /// Gets if entry value contains a string.
    /// </summary>
    public bool IsString => Type == NetworkTableType.String;

    /// <summary>
    /// Gets if entry value contains a byte[].
    /// </summary>
    public bool IsRaw => Type == NetworkTableType.Raw;

    /// <summary>
    /// Gets if entry value contains a bool[].
    /// </summary>
    public bool IsBooleanArray => Type == NetworkTableType.BooleanArray;

    /// <summary>
    /// Gets if entry value contains a long[].
    /// </summary>
    public bool IsIntegerArray => Type == NetworkTableType.IntegerArray;

    /// <summary>
    /// Gets if entry value contains a float[].
    /// </summary>
    public bool IsFloatArray => Type == NetworkTableType.FloatArray;

    /// <summary>
    /// Gets if entry value contains a double[].
    /// </summary>
    public bool IsDoubleArray => Type == NetworkTableType.DoubleArray;

    /// <summary>
    /// Gets if entry value contains a string[].
    /// </summary>
    public bool IsStringArray => Type == NetworkTableType.StringArray;


    /// <summary>
    /// Get the bool value.
    /// </summary>
    /// <returns>The bool value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of bool type.</exception>
    public bool GetBoolean()
    {
        if (Type != NetworkTableType.Boolean)
        {
            throw new InvalidCastException($"cannot convert {Type} to bool");
        }
        return m_structValue.boolValue;
    }

    /// <summary>
    /// Get the long value.
    /// </summary>
    /// <returns>The long value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of long type.</exception>
    public long GetInteger()
    {
        if (Type != NetworkTableType.Integer)
        {
            throw new InvalidCastException($"cannot convert {Type} to long");
        }
        return m_structValue.longValue;
    }

    /// <summary>
    /// Get the float value.
    /// </summary>
    /// <returns>The float value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of float type.</exception>
    public float GetFloat()
    {
        if (Type != NetworkTableType.Float)
        {
            throw new InvalidCastException($"cannot convert {Type} to float");
        }
        return m_structValue.floatValue;
    }

    /// <summary>
    /// Get the double value.
    /// </summary>
    /// <returns>The double value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of double type.</exception>
    public double GetDouble()
    {
        if (Type != NetworkTableType.Double)
        {
            throw new InvalidCastException($"cannot convert {Type} to double");
        }
        return m_structValue.doubleValue;
    }

    /// <summary>
    /// Get the string value.
    /// </summary>
    /// <returns>The string value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of string type.</exception>
    public string GetString()
    {
        if (Type != NetworkTableType.String)
        {
            throw new InvalidCastException($"cannot convert {Type} to string");
        }
        return (string)m_objectValue!;
    }

    /// <summary>
    /// Get the byte[] value.
    /// </summary>
    /// <returns>The byte[] value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of byte[] type.</exception>
    public byte[] GetRaw()
    {
        if (Type != NetworkTableType.Raw)
        {
            throw new InvalidCastException($"cannot convert {Type} to byte[]");
        }
        return (byte[])m_objectValue!;
    }

    /// <summary>
    /// Get the bool[] value.
    /// </summary>
    /// <returns>The bool[] value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of bool[] type.</exception>
    public bool[] GetBooleanArray()
    {
        if (Type != NetworkTableType.BooleanArray)
        {
            throw new InvalidCastException($"cannot convert {Type} to bool[]");
        }
        return (bool[])m_objectValue!;
    }

    /// <summary>
    /// Get the long[] value.
    /// </summary>
    /// <returns>The long[] value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of long[] type.</exception>
    public long[] GetIntegerArray()
    {
        if (Type != NetworkTableType.IntegerArray)
        {
            throw new InvalidCastException($"cannot convert {Type} to long[]");
        }
        return (long[])m_objectValue!;
    }

    /// <summary>
    /// Get the float[] value.
    /// </summary>
    /// <returns>The float[] value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of float[] type.</exception>
    public float[] GetFloatArray()
    {
        if (Type != NetworkTableType.FloatArray)
        {
            throw new InvalidCastException($"cannot convert {Type} to float[]");
        }
        return (float[])m_objectValue!;
    }

    /// <summary>
    /// Get the double[] value.
    /// </summary>
    /// <returns>The double[] value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of double[] type.</exception>
    public double[] GetDoubleArray()
    {
        if (Type != NetworkTableType.DoubleArray)
        {
            throw new InvalidCastException($"cannot convert {Type} to double[]");
        }
        return (double[])m_objectValue!;
    }

    /// <summary>
    /// Get the string[] value.
    /// </summary>
    /// <returns>The string[] value.</returns>
    /// <exception cref="InvalidCastException">Thrown if the entry value is not of string[] type.</exception>
    public string[] GetStringArray()
    {
        if (Type != NetworkTableType.StringArray)
        {
            throw new InvalidCastException($"cannot convert {Type} to string[]");
        }
        return (string[])m_objectValue!;
    }



    /// <summary>
    /// Creates a bool value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeBoolean(bool value)
    {
        return new NetworkTableValue(NetworkTableType.Boolean, value);
    }

    /// <summary>
    /// Creates a bool value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeBoolean(bool value, long time)
    {
        return new NetworkTableValue(NetworkTableType.Boolean, value, time);
    }


    /// <summary>
    /// Creates a long value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeInteger(long value)
    {
        return new NetworkTableValue(NetworkTableType.Integer, value);
    }

    /// <summary>
    /// Creates a long value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeInteger(long value, long time)
    {
        return new NetworkTableValue(NetworkTableType.Integer, value, time);
    }


    /// <summary>
    /// Creates a float value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeFloat(float value)
    {
        return new NetworkTableValue(NetworkTableType.Float, value);
    }

    /// <summary>
    /// Creates a float value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeFloat(float value, long time)
    {
        return new NetworkTableValue(NetworkTableType.Float, value, time);
    }


    /// <summary>
    /// Creates a double value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeDouble(double value)
    {
        return new NetworkTableValue(NetworkTableType.Double, value);
    }

    /// <summary>
    /// Creates a double value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeDouble(double value, long time)
    {
        return new NetworkTableValue(NetworkTableType.Double, value, time);
    }


    /// <summary>
    /// Creates a string value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeString(string value)
    {
        return new NetworkTableValue(NetworkTableType.String, value);
    }

    /// <summary>
    /// Creates a string value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeString(string value, long time)
    {
        return new NetworkTableValue(NetworkTableType.String, value, time);
    }


    /// <summary>
    /// Creates a byte[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeRaw(byte[] value)
    {
        return new NetworkTableValue(NetworkTableType.Raw, value);
    }

    /// <summary>
    /// Creates a byte[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeRaw(byte[] value, long time)
    {
        return new NetworkTableValue(NetworkTableType.Raw, value, time);
    }


    /// <summary>
    /// Creates a bool[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeBooleanArray(bool[] value)
    {
        return new NetworkTableValue(NetworkTableType.BooleanArray, value);
    }

    /// <summary>
    /// Creates a bool[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeBooleanArray(bool[] value, long time)
    {
        return new NetworkTableValue(NetworkTableType.BooleanArray, value, time);
    }


    /// <summary>
    /// Creates a long[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeIntegerArray(long[] value)
    {
        return new NetworkTableValue(NetworkTableType.IntegerArray, value);
    }

    /// <summary>
    /// Creates a long[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeIntegerArray(long[] value, long time)
    {
        return new NetworkTableValue(NetworkTableType.IntegerArray, value, time);
    }


    /// <summary>
    /// Creates a float[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeFloatArray(float[] value)
    {
        return new NetworkTableValue(NetworkTableType.FloatArray, value);
    }

    /// <summary>
    /// Creates a float[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeFloatArray(float[] value, long time)
    {
        return new NetworkTableValue(NetworkTableType.FloatArray, value, time);
    }


    /// <summary>
    /// Creates a double[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeDoubleArray(double[] value)
    {
        return new NetworkTableValue(NetworkTableType.DoubleArray, value);
    }

    /// <summary>
    /// Creates a double[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeDoubleArray(double[] value, long time)
    {
        return new NetworkTableValue(NetworkTableType.DoubleArray, value, time);
    }


    /// <summary>
    /// Creates a string[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeStringArray(string[] value)
    {
        return new NetworkTableValue(NetworkTableType.StringArray, value);
    }

    /// <summary>
    /// Creates a string[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static NetworkTableValue MakeStringArray(string[] value, long time)
    {
        return new NetworkTableValue(NetworkTableType.StringArray, value, time);
    }

}
