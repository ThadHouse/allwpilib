// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

/** NetworkTables FloatArray topic. */
public class FloatArrayTopic : Topic {
  /** The default type string for this topic type. */
  public static string kTypeString => "float[]";
  public static ReadOnlySpan<byte> kTypeStringUtf8 => "float[]"u8;

  /**
   * Construct from a generic topic.
   *
   * @param topic Topic
   */
  public FloatArrayTopic(Topic topic) : base(topic.Instance, topic.Handle) {
  }

  /**
   * Constructor; use NetworkTableInstance.getFloatArrayTopic() instead.
   *
   * @param inst Instance
   * @param handle Native handle
   */
  public FloatArrayTopic(NetworkTableInstance inst, NtTopic handle) : base(inst, handle) {
  }


  /**
   * Create a new subscriber to the topic.
   *
   * <p>The subscriber is only active as long as the returned object
   * is not closed.
   *
   * <p>Subscribers that do not match the published data type do not return
   * any values. To determine if the data type matches, use the appropriate
   * Topic functions.
   *
   * @param defaultValue default value used when a default is not provided to a
   *        getter function
   * @param options subscribe options
   * @return subscriber
   */
  public IFloatArraySubscriber Subscribe(
      float[] defaultValue,
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtSubscriber>(
        this,
        NtCore.Subscribe(
            Handle, NetworkTableType.FloatArray,
            "float[]"u8, options),
        defaultValue);
  }

  /**
   * Create a new subscriber to the topic, with specified type string.
   *
   * <p>The subscriber is only active as long as the returned object
   * is not closed.
   *
   * <p>Subscribers that do not match the published data type do not return
   * any values. To determine if the data type matches, use the appropriate
   * Topic functions.
   *
   * @param typeString type string
   * @param defaultValue default value used when a default is not provided to a
   *        getter function
   * @param options subscribe options
   * @return subscriber
   */
  public IFloatArraySubscriber SubscribeEx(
      string typeString,
      float[] defaultValue,
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtSubscriber>(
        this,
        NtCore.Subscribe(
            Handle, NetworkTableType.FloatArray,
            typeString, options),
        defaultValue);
  }

  /**
   * Create a new subscriber to the topic, with specified type string.
   *
   * <p>The subscriber is only active as long as the returned object
   * is not closed.
   *
   * <p>Subscribers that do not match the published data type do not return
   * any values. To determine if the data type matches, use the appropriate
   * Topic functions.
   *
   * @param typeString type string
   * @param defaultValue default value used when a default is not provided to a
   *        getter function
   * @param options subscribe options
   * @return subscriber
   */
  public IFloatArraySubscriber SubscribeEx(
      ReadOnlySpan<byte> typeString,
      float[] defaultValue,
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtSubscriber>(
        this,
        NtCore.Subscribe(
            Handle, NetworkTableType.FloatArray,
            typeString, options),
        defaultValue);
  }

  /**
   * Create a new publisher to the topic.
   *
   * <p>The publisher is only active as long as the returned object
   * is not closed.
   *
   * <p>It is not possible to publish two different data types to the same
   * topic. Conflicts between publishers are typically resolved by the server on
   * a first-come, first-served basis. Any published values that do not match
   * the topic's data type are dropped (ignored). To determine if the data type
   * matches, use the appropriate Topic functions.
   *
   * @param options publish options
   * @return publisher
   */
  public IFloatArrayPublisher Publish(
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtPublisher>(
        this,
        NtCore.Publish(
            Handle, NetworkTableType.FloatArray,
            "float[]"u8, options),
        []);
  }

 /**
   * Create a new publisher to the topic.
   *
   * <p>The publisher is only active as long as the returned object
   * is not closed.
   *
   * <p>It is not possible to publish two different data types to the same
   * topic. Conflicts between publishers are typically resolved by the server on
   * a first-come, first-served basis. Any published values that do not match
   * the topic's data type are dropped (ignored). To determine if the data type
   * matches, use the appropriate Topic functions.
   *
   * @param typeString type string
   * @param options publish options
   * @return publisher
   */
  public IFloatArrayPublisher PublishEx(
      string typeString, string properties,
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtPublisher>(
        this,
        NtCore.PublishEx(
            Handle, NetworkTableType.FloatArray,
            typeString, properties, options),
        []);
  }

  /**
   * Create a new publisher to the topic, with type string and initial properties.
   *
   * <p>The publisher is only active as long as the returned object
   * is not closed.
   *
   * <p>It is not possible to publish two different data types to the same
   * topic. Conflicts between publishers are typically resolved by the server on
   * a first-come, first-served basis. Any published values that do not match
   * the topic's data type are dropped (ignored). To determine if the data type
   * matches, use the appropriate Topic functions.
   *
   * @param typeString type string
   * @param properties JSON properties
   * @param options publish options
   * @return publisher
   * @throws IllegalArgumentException if properties is not a JSON object
   */
  public IFloatArrayPublisher PublishEx(
      ReadOnlySpan<byte> typeString,
      string properties,
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtPublisher>(
        this,
        NtCore.PublishEx(
            Handle, NetworkTableType.FloatArray,
            typeString, properties, options),
        []);
  }

  /**
   * Create a new publisher to the topic, with type string and initial properties.
   *
   * <p>The publisher is only active as long as the returned object
   * is not closed.
   *
   * <p>It is not possible to publish two different data types to the same
   * topic. Conflicts between publishers are typically resolved by the server on
   * a first-come, first-served basis. Any published values that do not match
   * the topic's data type are dropped (ignored). To determine if the data type
   * matches, use the appropriate Topic functions.
   *
   * @param typeString type string
   * @param properties JSON properties
   * @param options publish options
   * @return publisher
   * @throws IllegalArgumentException if properties is not a JSON object
   */
  public IFloatArrayPublisher PublishEx(
      string typeString,
      ReadOnlySpan<byte> properties,
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtPublisher>(
        this,
        NtCore.PublishEx(
            Handle, NetworkTableType.FloatArray,
            typeString, properties, options),
        []);
  }

  /**
   * Create a new publisher to the topic, with type string and initial properties.
   *
   * <p>The publisher is only active as long as the returned object
   * is not closed.
   *
   * <p>It is not possible to publish two different data types to the same
   * topic. Conflicts between publishers are typically resolved by the server on
   * a first-come, first-served basis. Any published values that do not match
   * the topic's data type are dropped (ignored). To determine if the data type
   * matches, use the appropriate Topic functions.
   *
   * @param typeString type string
   * @param properties JSON properties
   * @param options publish options
   * @return publisher
   * @throws IllegalArgumentException if properties is not a JSON object
   */
  public IFloatArrayPublisher PublishEx(
      ReadOnlySpan<byte> typeString,
      ReadOnlySpan<byte> properties,
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtPublisher>(
        this,
        NtCore.PublishEx(
            Handle, NetworkTableType.FloatArray,
            typeString, properties, options),
        []);
  }

/**
   * Create a new entry for the topic.
   *
   * <p>Entries act as a combination of a subscriber and a weak publisher. The
   * subscriber is active as long as the entry is not closed. The publisher is
   * created when the entry is first written to, and remains active until either
   * unpublish() is called or the entry is closed.
   *
   * <p>It is not possible to use two different data types with the same
   * topic. Conflicts between publishers are typically resolved by the server on
   * a first-come, first-served basis. Any published values that do not match
   * the topic's data type are dropped (ignored), and the entry will show no new
   * values if the data type does not match. To determine if the data type
   * matches, use the appropriate Topic functions.
   *
   * @param defaultValue default value used when a default is not provided to a
   *        getter function
   * @param options publish and/or subscribe options
   * @return entry
   */
  public IFloatArrayEntry GetEntry(
      float[] defaultValue,
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtEntry>(
        this,
        NtCore.GetEntry(
            Handle, NetworkTableType.FloatArray,
            "float[]"u8, options),
        defaultValue);
  }

  /**
   * Create a new entry for the topic, with specified type string.
   *
   * <p>Entries act as a combination of a subscriber and a weak publisher. The
   * subscriber is active as long as the entry is not closed. The publisher is
   * created when the entry is first written to, and remains active until either
   * unpublish() is called or the entry is closed.
   *
   * <p>It is not possible to use two different data types with the same
   * topic. Conflicts between publishers are typically resolved by the server on
   * a first-come, first-served basis. Any published values that do not match
   * the topic's data type are dropped (ignored), and the entry will show no new
   * values if the data type does not match. To determine if the data type
   * matches, use the appropriate Topic functions.
   *
   * @param typeString type string
   * @param defaultValue default value used when a default is not provided to a
   *        getter function
   * @param options publish and/or subscribe options
   * @return entry
   */
  public IFloatArrayEntry GetEntryEx(
      string typeString,
      float[] defaultValue,
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtEntry>(
        this,
        NtCore.GetEntry(
            Handle, NetworkTableType.FloatArray,
            typeString, options),
        defaultValue);
  }

  /**
   * Create a new entry for the topic, with specified type string.
   *
   * <p>Entries act as a combination of a subscriber and a weak publisher. The
   * subscriber is active as long as the entry is not closed. The publisher is
   * created when the entry is first written to, and remains active until either
   * unpublish() is called or the entry is closed.
   *
   * <p>It is not possible to use two different data types with the same
   * topic. Conflicts between publishers are typically resolved by the server on
   * a first-come, first-served basis. Any published values that do not match
   * the topic's data type are dropped (ignored), and the entry will show no new
   * values if the data type does not match. To determine if the data type
   * matches, use the appropriate Topic functions.
   *
   * @param typeString type string
   * @param defaultValue default value used when a default is not provided to a
   *        getter function
   * @param options publish and/or subscribe options
   * @return entry
   */
  public IFloatArrayEntry GetEntryEx(
      ReadOnlySpan<byte> typeString,
      float[] defaultValue,
      PubSubOptions options) {
    return new FloatArrayEntryImpl<NtEntry>(
        this,
        NtCore.GetEntry(
            Handle, NetworkTableType.FloatArray,
            typeString, options),
        defaultValue);
  }



}