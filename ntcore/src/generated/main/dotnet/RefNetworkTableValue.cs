// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using System.Runtime.InteropServices;
using NetworkTables.Natives;

namespace NetworkTables;

/// <summary>
/// A NetworkTable entry value used for write purposes
/// </summary>
public readonly ref partial struct RefNetworkTableValue
{


    internal RefNetworkTableValue(bool value)
    {
        Type = NetworkTableType.Boolean;
        Time = NtCore.Now();
        m_structValue = new(value);
    }
    internal RefNetworkTableValue(bool value, long time)
    {
        Type = NetworkTableType.Boolean;
        Time = time;
        m_structValue = new(value);
    }

    /// <summary>
    /// Creates a bool value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeBoolean(bool value)
    {
        return new RefNetworkTableValue(value);
    }

    /// <summary>
    /// Creates a bool value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeBoolean(bool value, long time)
    {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(long value)
    {
        Type = NetworkTableType.Integer;
        Time = NtCore.Now();
        m_structValue = new(value);
    }
    internal RefNetworkTableValue(long value, long time)
    {
        Type = NetworkTableType.Integer;
        Time = time;
        m_structValue = new(value);
    }

    /// <summary>
    /// Creates a long value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeInteger(long value)
    {
        return new RefNetworkTableValue(value);
    }

    /// <summary>
    /// Creates a long value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeInteger(long value, long time)
    {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(float value)
    {
        Type = NetworkTableType.Float;
        Time = NtCore.Now();
        m_structValue = new(value);
    }
    internal RefNetworkTableValue(float value, long time)
    {
        Type = NetworkTableType.Float;
        Time = time;
        m_structValue = new(value);
    }

    /// <summary>
    /// Creates a float value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeFloat(float value)
    {
        return new RefNetworkTableValue(value);
    }

    /// <summary>
    /// Creates a float value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeFloat(float value, long time)
    {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(double value)
    {
        Type = NetworkTableType.Double;
        Time = NtCore.Now();
        m_structValue = new(value);
    }
    internal RefNetworkTableValue(double value, long time)
    {
        Type = NetworkTableType.Double;
        Time = time;
        m_structValue = new(value);
    }

    /// <summary>
    /// Creates a double value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeDouble(double value)
    {
        return new RefNetworkTableValue(value);
    }

    /// <summary>
    /// Creates a double value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeDouble(double value, long time)
    {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(ReadOnlySpan<byte> value)
    {
        Type = NetworkTableType.Raw;
        Time = NtCore.Now();
        m_byteSpan = MemoryMarshal.AsBytes(value);
    }

    internal RefNetworkTableValue(ReadOnlySpan<byte> value, long time)
    {
        Type = NetworkTableType.Raw;
        Time = time;
        m_byteSpan = MemoryMarshal.AsBytes(value);
    }

    /// <summary>
    /// Creates a byte[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeRaw(ReadOnlySpan<byte> value)
    {
        return new RefNetworkTableValue(value);
    }

    /// <summary>
    /// Creates a byte[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeRaw(ReadOnlySpan<byte> value, long time)
    {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(ReadOnlySpan<bool> value)
    {
        Type = NetworkTableType.BooleanArray;
        Time = NtCore.Now();
        m_byteSpan = MemoryMarshal.AsBytes(value);
    }

    internal RefNetworkTableValue(ReadOnlySpan<bool> value, long time)
    {
        Type = NetworkTableType.BooleanArray;
        Time = time;
        m_byteSpan = MemoryMarshal.AsBytes(value);
    }

    /// <summary>
    /// Creates a bool[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeBooleanArray(ReadOnlySpan<bool> value)
    {
        return new RefNetworkTableValue(value);
    }

    /// <summary>
    /// Creates a bool[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeBooleanArray(ReadOnlySpan<bool> value, long time)
    {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(ReadOnlySpan<long> value)
    {
        Type = NetworkTableType.IntegerArray;
        Time = NtCore.Now();
        m_byteSpan = MemoryMarshal.AsBytes(value);
    }

    internal RefNetworkTableValue(ReadOnlySpan<long> value, long time)
    {
        Type = NetworkTableType.IntegerArray;
        Time = time;
        m_byteSpan = MemoryMarshal.AsBytes(value);
    }

    /// <summary>
    /// Creates a long[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeIntegerArray(ReadOnlySpan<long> value)
    {
        return new RefNetworkTableValue(value);
    }

    /// <summary>
    /// Creates a long[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeIntegerArray(ReadOnlySpan<long> value, long time)
    {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(ReadOnlySpan<float> value)
    {
        Type = NetworkTableType.FloatArray;
        Time = NtCore.Now();
        m_byteSpan = MemoryMarshal.AsBytes(value);
    }

    internal RefNetworkTableValue(ReadOnlySpan<float> value, long time)
    {
        Type = NetworkTableType.FloatArray;
        Time = time;
        m_byteSpan = MemoryMarshal.AsBytes(value);
    }

    /// <summary>
    /// Creates a float[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeFloatArray(ReadOnlySpan<float> value)
    {
        return new RefNetworkTableValue(value);
    }

    /// <summary>
    /// Creates a float[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeFloatArray(ReadOnlySpan<float> value, long time)
    {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(ReadOnlySpan<double> value)
    {
        Type = NetworkTableType.DoubleArray;
        Time = NtCore.Now();
        m_byteSpan = MemoryMarshal.AsBytes(value);
    }

    internal RefNetworkTableValue(ReadOnlySpan<double> value, long time)
    {
        Type = NetworkTableType.DoubleArray;
        Time = time;
        m_byteSpan = MemoryMarshal.AsBytes(value);
    }

    /// <summary>
    /// Creates a double[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeDoubleArray(ReadOnlySpan<double> value)
    {
        return new RefNetworkTableValue(value);
    }

    /// <summary>
    /// Creates a double[] value.
    /// </summary>
    /// <param name="value">the value</param>
    /// <param name="time">the creation time to use (instead of the current time)</param>
    /// <returns>The entry value</returns>
    public static RefNetworkTableValue MakeDoubleArray(ReadOnlySpan<double> value, long time)
    {
        return new RefNetworkTableValue(value, time);
    }

}
