// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Natives;

namespace NetworkTables;

public readonly ref partial struct RefNetworkTableValue
{


    internal RefNetworkTableValue(bool value)
    {
        Type = NetworkTableType.Boolean;
        Time = NtCore.Now();
        m_structValue = new(value);
    }
    internal RefNetworkTableValue(bool value, long time)
    {
        Type = NetworkTableType.Boolean;
        Time = time;
        m_structValue = new(value);
    }

    public static RefNetworkTableValue MakeBoolean(bool value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeBoolean(long time, bool value) {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(long value)
    {
        Type = NetworkTableType.Integer;
        Time = NtCore.Now();
        m_structValue = new(value);
    }
    internal RefNetworkTableValue(long value, long time)
    {
        Type = NetworkTableType.Integer;
        Time = time;
        m_structValue = new(value);
    }

    public static RefNetworkTableValue MakeInteger(long value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeInteger(long time, long value) {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(float value)
    {
        Type = NetworkTableType.Float;
        Time = NtCore.Now();
        m_structValue = new(value);
    }
    internal RefNetworkTableValue(float value, long time)
    {
        Type = NetworkTableType.Float;
        Time = time;
        m_structValue = new(value);
    }

    public static RefNetworkTableValue MakeFloat(float value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeFloat(long time, float value) {
        return new RefNetworkTableValue(value, time);
    }


    internal RefNetworkTableValue(double value)
    {
        Type = NetworkTableType.Double;
        Time = NtCore.Now();
        m_structValue = new(value);
    }
    internal RefNetworkTableValue(double value, long time)
    {
        Type = NetworkTableType.Double;
        Time = time;
        m_structValue = new(value);
    }

    public static RefNetworkTableValue MakeDouble(double value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeDouble(long time, double value) {
        return new RefNetworkTableValue(value, time);
    }


    internal readonly string? m_stringValue;

    internal RefNetworkTableValue(string value)
    {
        Type = NetworkTableType.String;
        Time = NtCore.Now();
        m_stringValue = value;
    }
    internal RefNetworkTableValue(string value, long time)
    {
        Type = NetworkTableType.String;
        Time = time;
        m_stringValue = value;
    }

    public static RefNetworkTableValue MakeString(string value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeString(long time, string value) {
        return new RefNetworkTableValue(value, time);
    }


    internal readonly ReadOnlySpan<byte> m_byteSpan;

    internal RefNetworkTableValue(ReadOnlySpan<byte> value)
    {
        Type = NetworkTableType.Raw;
        Time = NtCore.Now();
        m_byteSpan = value;
    }

    internal RefNetworkTableValue(ReadOnlySpan<byte> value, long time)
    {
        Type = NetworkTableType.Raw;
        Time = time;
        m_byteSpan = value;
    }

    public static RefNetworkTableValue MakeRaw(ReadOnlySpan<byte> value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeRaw(long time, ReadOnlySpan<byte> value) {
        return new RefNetworkTableValue(value, time);
    }


    internal readonly ReadOnlySpan<bool> m_boolSpan;

    internal RefNetworkTableValue(ReadOnlySpan<bool> value)
    {
        Type = NetworkTableType.BooleanArray;
        Time = NtCore.Now();
        m_boolSpan = value;
    }

    internal RefNetworkTableValue(ReadOnlySpan<bool> value, long time)
    {
        Type = NetworkTableType.BooleanArray;
        Time = time;
        m_boolSpan = value;
    }

    public static RefNetworkTableValue MakeBooleanArray(ReadOnlySpan<bool> value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeBooleanArray(long time, ReadOnlySpan<bool> value) {
        return new RefNetworkTableValue(value, time);
    }


    internal readonly ReadOnlySpan<long> m_longSpan;

    internal RefNetworkTableValue(ReadOnlySpan<long> value)
    {
        Type = NetworkTableType.IntegerArray;
        Time = NtCore.Now();
        m_longSpan = value;
    }

    internal RefNetworkTableValue(ReadOnlySpan<long> value, long time)
    {
        Type = NetworkTableType.IntegerArray;
        Time = time;
        m_longSpan = value;
    }

    public static RefNetworkTableValue MakeIntegerArray(ReadOnlySpan<long> value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeIntegerArray(long time, ReadOnlySpan<long> value) {
        return new RefNetworkTableValue(value, time);
    }


    internal readonly ReadOnlySpan<float> m_floatSpan;

    internal RefNetworkTableValue(ReadOnlySpan<float> value)
    {
        Type = NetworkTableType.FloatArray;
        Time = NtCore.Now();
        m_floatSpan = value;
    }

    internal RefNetworkTableValue(ReadOnlySpan<float> value, long time)
    {
        Type = NetworkTableType.FloatArray;
        Time = time;
        m_floatSpan = value;
    }

    public static RefNetworkTableValue MakeFloatArray(ReadOnlySpan<float> value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeFloatArray(long time, ReadOnlySpan<float> value) {
        return new RefNetworkTableValue(value, time);
    }


    internal readonly ReadOnlySpan<double> m_doubleSpan;

    internal RefNetworkTableValue(ReadOnlySpan<double> value)
    {
        Type = NetworkTableType.DoubleArray;
        Time = NtCore.Now();
        m_doubleSpan = value;
    }

    internal RefNetworkTableValue(ReadOnlySpan<double> value, long time)
    {
        Type = NetworkTableType.DoubleArray;
        Time = time;
        m_doubleSpan = value;
    }

    public static RefNetworkTableValue MakeDoubleArray(ReadOnlySpan<double> value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeDoubleArray(long time, ReadOnlySpan<double> value) {
        return new RefNetworkTableValue(value, time);
    }


    internal readonly ReadOnlySpan<string> m_stringSpan;

    internal RefNetworkTableValue(ReadOnlySpan<string> value)
    {
        Type = NetworkTableType.StringArray;
        Time = NtCore.Now();
        m_stringSpan = value;
    }

    internal RefNetworkTableValue(ReadOnlySpan<string> value, long time)
    {
        Type = NetworkTableType.StringArray;
        Time = time;
        m_stringSpan = value;
    }

    public static RefNetworkTableValue MakeStringArray(ReadOnlySpan<string> value) {
        return new RefNetworkTableValue(value);
    }

    public static RefNetworkTableValue MakeStringArray(long time, ReadOnlySpan<string> value) {
        return new RefNetworkTableValue(value, time);
    }

}