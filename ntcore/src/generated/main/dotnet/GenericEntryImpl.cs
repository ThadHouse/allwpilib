// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Natives;

namespace NetworkTables;

internal sealed partial class GenericEntryImpl<THandle>
{

    public bool GetBoolean(bool defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsBoolean)
        {
            return value.GetBoolean();
        }
        return defaultValue;
    }

    public bool SetBoolean(bool value)
    {
        return SetBoolean(value, 0);
    }

    public bool SetBoolean(bool value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeBoolean(value, time));
    }

    public bool SetDefaultBoolean(bool value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeBoolean(value));
    }

    public long GetInteger(long defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsInteger)
        {
            return value.GetInteger();
        }
        return defaultValue;
    }

    public bool SetInteger(long value)
    {
        return SetInteger(value, 0);
    }

    public bool SetInteger(long value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeInteger(value, time));
    }

    public bool SetDefaultInteger(long value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeInteger(value));
    }

    public float GetFloat(float defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsFloat)
        {
            return value.GetFloat();
        }
        return defaultValue;
    }

    public bool SetFloat(float value)
    {
        return SetFloat(value, 0);
    }

    public bool SetFloat(float value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeFloat(value, time));
    }

    public bool SetDefaultFloat(float value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeFloat(value));
    }

    public double GetDouble(double defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsDouble)
        {
            return value.GetDouble();
        }
        return defaultValue;
    }

    public bool SetDouble(double value)
    {
        return SetDouble(value, 0);
    }

    public bool SetDouble(double value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeDouble(value, time));
    }

    public bool SetDefaultDouble(double value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeDouble(value));
    }

    public string GetString(string defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsString)
        {
            return value.GetString();
        }
        return defaultValue;
    }

    public bool SetString(string value)
    {
        return SetString(value, 0);
    }

    public bool SetString(string value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeString(value, time));
    }

    public bool SetDefaultString(string value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeString(value));
    }

    public byte[] GetRaw(byte[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsRaw)
        {
            return value.GetRaw();
        }
        return defaultValue;
    }

    public bool SetRaw(byte[] value)
    {
        return SetRaw(value, 0);
    }

    public bool SetRaw(byte[] value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeRaw(value, time));
    }

    public bool SetDefaultRaw(byte[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeRaw(value));
    }

    public bool[] GetBooleanArray(bool[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsBooleanArray)
        {
            return value.GetBooleanArray();
        }
        return defaultValue;
    }

    public bool SetBooleanArray(bool[] value)
    {
        return SetBooleanArray(value, 0);
    }

    public bool SetBooleanArray(bool[] value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeBooleanArray(value, time));
    }

    public bool SetDefaultBooleanArray(bool[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeBooleanArray(value));
    }

    public long[] GetIntegerArray(long[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsIntegerArray)
        {
            return value.GetIntegerArray();
        }
        return defaultValue;
    }

    public bool SetIntegerArray(long[] value)
    {
        return SetIntegerArray(value, 0);
    }

    public bool SetIntegerArray(long[] value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeIntegerArray(value, time));
    }

    public bool SetDefaultIntegerArray(long[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeIntegerArray(value));
    }

    public float[] GetFloatArray(float[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsFloatArray)
        {
            return value.GetFloatArray();
        }
        return defaultValue;
    }

    public bool SetFloatArray(float[] value)
    {
        return SetFloatArray(value, 0);
    }

    public bool SetFloatArray(float[] value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeFloatArray(value, time));
    }

    public bool SetDefaultFloatArray(float[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeFloatArray(value));
    }

    public double[] GetDoubleArray(double[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsDoubleArray)
        {
            return value.GetDoubleArray();
        }
        return defaultValue;
    }

    public bool SetDoubleArray(double[] value)
    {
        return SetDoubleArray(value, 0);
    }

    public bool SetDoubleArray(double[] value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeDoubleArray(value, time));
    }

    public bool SetDefaultDoubleArray(double[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeDoubleArray(value));
    }

    public string[] GetStringArray(string[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsStringArray)
        {
            return value.GetStringArray();
        }
        return defaultValue;
    }

    public bool SetStringArray(string[] value)
    {
        return SetStringArray(value, 0);
    }

    public bool SetStringArray(string[] value, long time)
    {
        return NtCore.SetEntryValue(Handle, RefNetworkTableValue.MakeStringArray(value, time));
    }

    public bool SetDefaultStringArray(string[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, RefNetworkTableValue.MakeStringArray(value));
    }


    public void Unpublish()
    {
        NtCore.Unpublish(Handle);
    }
}
