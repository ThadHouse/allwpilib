apply plugin: 'maven-publish'
apply plugin: 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin'

if (!hasProperty('releaseType')) {
    WPILibVersion {
        releaseType = 'dev'
    }
}

def pubVersion = ''
if (project.hasProperty("publishVersion")) {
    pubVersion = project.publishVersion
} else {
    pubVersion = WPILibVersion.version
}

if (pubVersion == null || pubVersion == "") {
  pubVersion = "424242-SNAPSHOT"
}

def baseArtifactId = 'wpilibc'
def artifactGroupId = 'edu.wpi.first.wpilibc'

task cppSourcesZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "sources"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/cpp') {
        into '/'
    }
}

task cppHeadersZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "headers"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/include') {
        into '/'
    }
}

model {
    publishing {
        def wpilibCTaskList = createComponentZipTasks($.components, 'wpilibc', 'zipcpp', Zip, project, includeStandardZipFormat)

        $.components.each {
            if (it in NativeLibrarySpec && it.name == 'wpilibc') {
                def libSpec = it
                tasks.create('generateWpilibLinkScript', Task) {
                    build.dependsOn it
                    libSpec.binaries.each {
                        if (getClassifier(it) == 'linuxathena' && it in SharedLibraryBinarySpec) {
                            dependsOn it.buildTask
                        }
                    }

                    def linkFile = project.file("${buildDir}/libwpi.so")
                    outputs.file linkFile

                doLast {
                    def libs = []
                    libSpec.binaries.each {
                        if (getClassifier(it) == 'linuxathena' && it in SharedLibraryBinarySpec) {
                            it.libs.each {
                                it.linkFiles.each {
                                    libs.add it.name
                                }

                            }
                            libs.add it.sharedLibraryFile.name
                        }
                    }
                    // TODO: Generate wpi linker file

                    /* GNU ld script */
    //OUTPUT_FORMAT(elf32-littlearm)
    //GROUP ( AS_NEEDED ( -lwpilibc -lHALAthena -lntcore -lwpiutil -lcscore -lopencv -lnilibraries ) )



                    linkFile.withWriter { out ->
                        out.println '/* GNU ld script */'
                        out.println 'OUTPUT_FORMAT(elf32-littlearm)'
                        out.print 'GROUP ( AS_NEEDED ( '
                        libs.each {
                            out.print '-l'
                            out.print it
                            out.print ' '
                        }
                        out.println ') )'
                    }

                    libs.each {
                        println it
                    }
                }
                }
            }
        }

        publications {
            cpp(MavenPublication) {
                wpilibCTaskList.each {
                    artifact it
                }
                artifact cppHeadersZip
                artifact cppSourcesZip

                artifactId = baseArtifactId
                groupId artifactGroupId
                version pubVersion
            }
        }
    }
}
